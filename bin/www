#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mauricio-test:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


const cors = require("cors");
const express = require("express");
const parser = require("body-parser");
const Character = require("./db/models/Character");
const charactersController = require("./db/controllers/characters");
require("dotenv").config();
const app = express();

app.use(cors());

app.use(parser.urlencoded({ extended: true }));

app.use(parser.json());

app.get("/", (req, res) => {
  res.redirect("/characters");
});

// app.get("/characters", (req, res) => {
//   Character.find({}).then((Character) => {
//     res.json(Character);
//   });
// });

// app.post("/characters", (req, res) => {
//   Character.create(req.body).then((characters) => {
//     res.json(characters);
//   });
// });

// app.delete("/characters/:name", function (req, res) {
//   Character.findOneAndRemove({ name: req.params.id }).then((characters) => {
//     res.json(characters);
//   });
// });

app.use("/characters/", charactersController);

app.set("port", process.env.PORT || 3000);

app.listen(app.get("port"), () => {
  console.log(`âœ… PORT: ${app.get("port")} ðŸŒŸ`);
});
